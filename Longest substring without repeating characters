import java.util.HashMap;

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int maxLength = 0;
        // Map to store the last index of each character
        HashMap<Character, Integer> charIndexMap = new HashMap<>();
        // Start index of the current window
        int start = 0;

        for (int end = 0; end < s.length(); end++) {
            char currentChar = s.charAt(end);
            // If the character is already in the map and its index is within the current window
            if (charIndexMap.containsKey(currentChar) && charIndexMap.get(currentChar) >= start) {
                // Move the start to the next position after the repeating character
                start = charIndexMap.get(currentChar) + 1;
            }
            // Update the last index of the current character
            charIndexMap.put(currentChar, end);
            // Update the maximum length found so far
            maxLength = Math.max(maxLength, end - start + 1);
        }

        return maxLength;
    }
}
